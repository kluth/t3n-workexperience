import React, { useEffect, useState } from 'react';
import { gql } from '@apollo/client';
import type { NextPage } from 'next';
import Head from 'next/head';

import {
  Box,
  Button,
  Grid,
  GridItem,
  Heading,
  NewsCard,
} from '@t3n/components';

import apolloClient from '../lib/client';
import { Article } from '../types/def';

const Home: NextPage = () => {
  const [news, setNews] = useState<Article[]>([]);
  const [bookmarks, setBookmarks] = useState<Article[]>([]);
  const fetchNews = async () => {
    const result = await apolloClient.query({
      query: gql`
        {
          news {
            identifier
            title
            teaser
            authorName
            imageUrl
            date
          }
        }
      `,
    });
    setNews(result.data.news);
  };

  useEffect(() => {
    fetchNews();
  }, []);

  return (
    <div>
      <Head>
        <title>t3n Workexperience</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Heading>News @t3n</Heading>
        <Box>
          <Grid>
            {news.map((n: Article) => (
              <GridItem key={n?.identifier} width={1 / 3}>
                <Button
                  size="small"
                  variant="primary"
                  onClick={() => {
                    if (!bookmarks.includes(n)) {
                      setBookmarks([...bookmarks, n]);
                      setNews(news.filter((item) => item !== n));
                    }
                  }}
                >
                  <NewsCard
                    news={{
                      title: n?.title,
                      author: {
                        name: n?.authorName,
                        avatar: 'https://picsum.photos/64',
                      },
                      imageUrl: n?.imageUrl,
                      type: 'News',
                      url: n?.url,
                      publishedAt: new Date(n?.date),
                    }}
                    type="HERO"
                    loading={false}
                    key={`article-${n?.identifier}`}
                  />
                </Button>
              </GridItem>
            ))}
            <GridItem width={1}>
              <Heading>Bookmarked</Heading>
            </GridItem>
            {bookmarks.map((n: Article) => (
              <GridItem key={n?.identifier} width={1 / 3}>
                <Button
                  size="small"
                  variant="primary"
                  onClick={() => {
                    if (bookmarks.includes(n)) {
                      setBookmarks(bookmarks.filter((b) => b !== n));
                      setNews([...news, n]);
                    }
                  }}
                >
                  <NewsCard
                    news={{
                      title: n?.title,
                      author: {
                        name: n?.authorName,
                        avatar: 'https://picsum.photos/64',
                      },
                      imageUrl: n?.imageUrl,
                      type: 'News',
                      url: n?.url,
                      publishedAt: new Date(n?.date),
                    }}
                    type="HERO"
                    loading={false}
                    key={`article-${n?.identifier}`}
                  />
                </Button>
              </GridItem>
            ))}
          </Grid>
        </Box>
      </main>
    </div>
  );
};

export default Home;
